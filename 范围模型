//范围模型
//A与B进行博弈，在桌上的一排牌，A先手拿，B后手拿，只能从左右拿
//请问谁会赢
int win(vector<int> ans) {
	if (ans.size() == 0) {
		return 0;
	}
	return max(f(ans, 0, ans.size() - 1), s(ans, 0, ans.size() - 1));
}

int f(vector<int> ans, int L, int R) {//先手拿在L到R上最大的
	if (L == R) {
		return ans[L];
	}
	return max(ans[L] + s(ans, L + 1, R), ans[R] + s(ans, L, R - 1));
}

int s(vector<int> ans, int L, int R) {//后手拿在L到R上最大的
	if (L == R) {
		return 0;
	}
	return min(f(ans, L+1, R), f(ans, L, R-1));
}



//n*n,N皇后问题
int process(int i, vector<int> ans, int n) {
	if (i == n) {
		return 1;
	}
	int res = 0;
	for (int j = 0;j < n;j++) {
		if (isValid(ans, i, j)) {
			ans[i] = j;
			res += process(i + 1, ans, n);
		}
	}
	return res;
}

bool isValid(vector<int> ans, int i, int j) {
	for (int k = 0;k < i;k++) {
		if (j == ans[k] || abs(ans[k] - j) == abs(i - k)) {
			return false;
		}
	}
	return true;
}






//递归解决01背包问题
int maxvalue(vector<int> w, vector<int> v, int bag) {
	return process(w, v, 0, bag);
}

int process(vector<int> w, vector<int> v, int index, int rest) {
	if (rest < 0) {
		return -1;
	}
	if (index == w.size()) {
		return 0;
	}
	//有货也有空间
	int p1 = process(w, v, index + 1, rest);
	int p2 = -1;
	int p2next = process(w, v, index + 1, rest - w[index]);
	if (p2next != -1) {
		p2 = p2next + v[index];
	}
	return max(p1, p2);
}
