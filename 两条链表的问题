//struct Node {
//	int val;
//	Node* next;
//};


//找出两条链表的第一个相交节点
Node* GetInsertNode(Node* head1, Node* head2) {
	if (head1 == NULL || head2 == NULL) {
		return NULL;
	}
	Node* loop1 = getloopNode(head1);
	Node* loop2 = getloopNode(head2);
	if (loop1 == NULL && loop2 == NULL) {
		return noloop(head1, head2);
	}
	if (loop1 != NULL && loop2 != NULL) {
		return bothloop(head1, loop1, head2, loop2);
	}
	return NULL;
}


//找到链表第一个入环节点，如果无环，返回NULL
Node* getloopNode(Node* head) {
	if (head == NULL || head->next == NULL || head->next->next == NULL) {
		return NULL;
	}
	Node* n1 = head->next, * n2 = head->next->next;
	while (n1 != n2) {
		if (n2 == NULL || n2->next == NULL) {
			return NULL;
		}
		n1 = n1->next;
		n2 = n2->next->next;
	}
	n2 = head;
	while (n1 != n2) {
		n1 = n1->next;
		n2 = n2->next;
	}
	return n2;
}



//如果两个链表都无环，返回第一个相交节点，如果不相交，返回NULL
Node* noloop(Node* head1, Node* head2) {
	if (head1 == NULL || head2 == NULL) {
		return NULL;
	}
	Node* cur1 = head1;
	Node* cur2 = head2;
	int n = 0;//计算两个链表的长度差
	while (cur1->next) {
		n++;
		cur1 = cur1->next;
	}
	while (cur2->next) {
		n--;
		cur2 = cur2->next;
	}
	if (cur1 != cur2) {
		return NULL;
	}
	cur1 = n > 0 ? head1 : head2;//谁长谁的头变成cur1
	cur2 = cur1 == head1 ? head2 : head1;
	n = abs(n);
	while (n != 0) {
		n--;
		cur1 = cur1->next;
	}
	while (cur1 != cur2) {
		cur1 = cur1->next;
		cur2 = cur2->next;
	}
	return cur1;//cur1,cur2都一样
}



//如果两个有环链表，返回第一个相交节点，如果不相交返回NULL
Node* bothloop(Node* head1, Node* loop1, Node* head2, Node* loop2) {
	Node* cur1 = NULL;
	Node* cur2 = NULL;
	if (loop1 == loop2) {
		cur1 = head1;
		cur2 = head2;
		int n = 0;//参照两个个无环链表的代码，返回第一个交点
		while (cur1 != loop1) {
			n++;
			cur1 = cur1->next;
		}
		while (cur2 != loop2) {
			n--;
			cur2 = cur2->next;
		}
		cur1 = n > 0 ? head1 : head2;//谁长谁的头变成cur1
		cur2 = cur1 == head1 ? head2 : head1;
		n = abs(n);
		while (n != 0) {
			n--;
			cur1 = cur1->next;
		}
		while (cur1 != cur2) {
			cur1 = cur1->next;
			cur2 = cur2->next;
		}
		return cur1;//cur1,cur2都一样
	}
	else {
		cur1 = loop1->next;
		while (cur1 != loop1) {
			if (cur1 == loop2) {
				return loop1;//loop1,loop2哪个都可以
			}
			cur1 = cur1->next;
		}
		return nullptr;
	}
